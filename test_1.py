##conda install anaconda::biopython


from Bio.pairwise2 import *
from Bio.SubsMat import MatrixInfo as matlist
import random

matrix = matlist.blosum62

seq1 = "VLSEGEWQLVLHVWAKVEADVAGHGQDILIRLFKSHPETLEKFDRFKHLKTEAEMKASEDLKKHGVTVLTALGAILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISEAIIHVLHSRHPGDFGADAQGAMNKALELFRKDIAAKYKELGYQG"

seq2 = "GLSDGEWQLVLNVWGKVEADVAGHGQEVLIRLFKGHPETLEKFDKFKHLKSEDEMKASEDLKKHGNTVLTALGGILKKKGHHEAELTPLAQSHATKHKIPVKYLEFISEAIIQVLQSKHPGDFGADAQGAMSKALELFRNDMAAKYKELGFQG"

seq3 = "GSMNPPPPETSNPNKPKRQTNQLQYLLRVVLKTLWKHQFAWPFQQPVDAVKLNLPDYYKIIKTPMDMGTIKKRLENNYYWNAQECIQDFNTMFTNCYIYNKPGDDIVLMAEALEKLFLQKINELPTEE"

for a in align.globaldx(seq1, seq2, matrix):
        print(format_alignment(*a))

for a in align.globaldx(seq2, seq3, matrix):
        print(format_alignment(*a))

for a in align.globaldx(seq1, seq3, matrix):
        print(format_alignment(*a))
        
hSCOTIN = "MTAPVPAPRILLPLLLLLLLTPPPGARGEVCMASRGLSLFPESCPDFCCGTCDDQYCCSDVLKKFVWSEERCAVPEASVPASVEPVEQLGSALRFRPGYNDPMSGFGATLAVGLTIFVLSVVTIIICFTCSCCCLYKTCRRPRPVVTTTTSTTVVHAPYPQPPSVPPSYPGPSYQGYHTMPPQPGMPAAPYPMQYPPPYPAQPMGPPAYHETLAGGAAAPYPASQPPYNPAYMDAPKAAL"
mSCOTIN = "MAAPAPSLWTLLLLLLLLPPPPGAHGELCRPFGEDNSIPVFCPDFCCGSCSNQYCCSDVLRKIQWNEEMCPEPESSRFSTPAEETPEHLGSALKFRSSFDSDPMSGFGATVAIGVTIFVVFIATIIICFTCSCCCLYKMCCPQRPVVTNTTTTTVVHAPYPQPQPQPVAPSYPGPTYQGYHPMPPQPGMPAAPYPTQYPPPYLAQPTGPPPYHESLAGASQPPYNPTYMDSLKTIP"
hSCOTINd150_177 = "MTAPVPAPRILLPLLLLLLLTPPPGARGEVCMASRGLSLFPESCPDFCCGTCDDQYCCSDVLKKFVWSEERCAVPEASVPASVEPVEQLGSALRFRPGYNDPMSGFGATLAVGLTIFVLSVVTIIICFTCSCCCLYKTCRRPRPVVTTTHTMPPQPGMPAAPYPMQYPPPYPAQPMGPPAYHETLAGGAAAPYPASQPPYNPAYMDAPKAAL"

EGFR = "MRPSGTAGAALLALLAALCPASRALEEKKVCQGTSNKLTQLGTFEDHFLSLQRMFNNCEVVLGNLEITYVQRNYDLSFLKTIQEVAGYVLIALNTVERIPLENLQIIRGNMYYENSYALAVLSNYDANKTGLKELPMRNLQEILHGAVRFSNNPALCNVESIQWRDIVSSDFLSNMSMDFQNHLGSCQKCDPSCPNGSCWGAGEENCQKLTKIICAQQCSGRCRGKSPSDCCHNQCAAGCTGPRESDCLVCRKFRDEATCKDTCPPLMLYNPTTYQMDVNPEGKYSFGATCVKKCPRNYVVTDHGSCVRACGADSYEMEEDGVRKCKKCEGPCRKVCNGIGIGEFKDSLSINATNIKHFKNCTSISGDLHILPVAFRGDSFTHTPPLDPQELDILKTVKEITGFLLIQAWPENRTDLHAFENLEIIRGRTKQHGQFSLAVVSLNITSLGLRSLKEISDGDVIISGNKNLCYANTINWKKLFGTSGQKTKIISNRGENSCKATGQVCHALCSPEGCWGPEPRDCVSCRNVSRGRECVDKCNLLEGEPREFVENSECIQCHPECLPQAMNITCTGRGPDNCIQCAHYIDGPHCVKTCPAGVMGENNTLVWKYADAGHVCHLCHPNCTYGCTGPGLEGCPTNGPKIPSIATGMVGALLLLLVVALGIGLFMRRRHIVRKRTLRRLLQERELVEPLTPSGEAPNQALLRILKETEFKKIKVLGSGAFGTVYKGLWIPEGEKVKIPVAIKELREATSPKANKEILDEAYVMASVDNPHVCRLLGICLTSTVQLITQLMPFGCLLDYVREHKDNIGSQYLLNWCVQIAKGMNYLEDRRLVHRDLAARNVLVKTPQHVKITDFGLAKLLGAEEKEYHAEGGKVPIKWMALESILHRIYTHQSDVWSYGVTVWELMTFGSKPYDGIPASEISSILEKGERLPQPPICTIDVYMIMVKCWMIDADSRPKFRELIIEFSKMARDPQRYLVIQGDERMHLPSPTDSNFYRALMDEEDMDDVVDADEYLIPQQGFFSSPSTSRTPLLSSLSATSNNSTVACIDRNGLQSCPIKEDSFLQRYSSDPTGALTEDSIDDTFLPVPEYINQSVPKRPAGSVQNPVYHNQPLNPAPSRDPHYQDPHSTAVGNPEYLNTVQPTCVNSTFDSPAHWAQKGSHQISLDNPDYQQDFFPKEAKPNGIFKGSTAENAEYLRVAPQSSEFIGA"
EGFRL858R = "MRPSGTAGAALLALLAALCPASRALEEKKVCQGTSNKLTQLGTFEDHFLSLQRMFNNCEVVLGNLEITYVQRNYDLSFLKTIQEVAGYVLIALNTVERIPLENLQIIRGNMYYENSYALAVLSNYDANKTGLKELPMRNLQEILHGAVRFSNNPALCNVESIQWRDIVSSDFLSNMSMDFQNHLGSCQKCDPSCPNGSCWGAGEENCQKLTKIICAQQCSGRCRGKSPSDCCHNQCAAGCTGPRESDCLVCRKFRDEATCKDTCPPLMLYNPTTYQMDVNPEGKYSFGATCVKKCPRNYVVTDHGSCVRACGADSYEMEEDGVRKCKKCEGPCRKVCNGIGIGEFKDSLSINATNIKHFKNCTSISGDLHILPVAFRGDSFTHTPPLDPQELDILKTVKEITGFLLIQAWPENRTDLHAFENLEIIRGRTKQHGQFSLAVVSLNITSLGLRSLKEISDGDVIISGNKNLCYANTINWKKLFGTSGQKTKIISNRGENSCKATGQVCHALCSPEGCWGPEPRDCVSCRNVSRGRECVDKCNLLEGEPREFVENSECIQCHPECLPQAMNITCTGRGPDNCIQCAHYIDGPHCVKTCPAGVMGENNTLVWKYADAGHVCHLCHPNCTYGCTGPGLEGCPTNGPKIPSIATGMVGALLLLLVVALGIGLFMRRRHIVRKRTLRRLLQERELVEPLTPSGEAPNQALLRILKETEFKKIKVLGSGAFGTVYKGLWIPEGEKVKIPVAIKELREATSPKANKEILDEAYVMASVDNPHVCRLLGICLTSTVQLITQLMPFGCLLDYVREHKDNIGSQYLLNWCVQIAKGMNYLEDRRLVHRDLAARNVLVKTPQHVKITDFGARKLLGAEEKEYHAEGGKVPIKWMALESILHRIYTHQSDVWSYGVTVWELMTFGSKPYDGIPASEISSILEKGERLPQPPICTIDVYMIMVKCWMIDADSRPKFRELIIEFSKMARDPQRYLVIQGDERMHLPSPTDSNFYRALMDEEDMDDVVDADEYLIPQQGFFSSPSTSRTPLLSSLSATSNNSTVACIDRNGLQSCPIKEDSFLQRYSSDPTGALTEDSIDDTFLPVPEYINQSVPKRPAGSVQNPVYHNQPLNPAPSRDPHYQDPHSTAVGNPEYLNTVQPTCVNSTFDSPAHWAQKGSHQISLDNPDYQQDFFPKEAKPNGIFKGSTAENAEYLRVAPQSSEFIGA

for a in align.globaldx(hSCOTIN, mSCOTIN, matrix):
        print(format_alignment(*a))

import os
os.getcwd() ## 파일이 생성되는 path

aa_list = ['A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V']
choicelist = [random.choice(aa_list) for i in range(500)] ## create reandom sequence, range 500
a=''
for choice in choicelist:
        a = a + choice

with open ('./random_seq.txt', 'w') as f: ## 자원을 획득하고 사용 직후 반납하는 문법
        f.write(a)

## alphafold2 : coevolution 기반의 단백질 예측
## conda install -c conda-forge pymol-open-source
## brew install brewsci/bio/pymol
## run pymol


## 구조 비교 계산
## pymol에서 두개 PDB를 다 열어줌
## 구조 alignment (action -> alogn)

## RMSD : 두 분자 간의 차이를 pymol이 자동으로 계산해줌, EGFR정도의 분자의 경우 2보다 작으면 높은 유사도를 갖는다고 생각, 값이 커지면 커질 수록 낮은 유사도
## SCOTIN, SCOTIN delta IDR은 20.160
## hSCOTIN, mSCOTIN은 12.643

## Multimer
## 서로 다른 두 sequence를 inputt으로 넣어주되, seq1:seq2을 넣어주고 
돌려줌